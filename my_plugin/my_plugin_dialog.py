# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MyPluginDialog
                                 A QGIS plugin
 read and show metadata
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-11-22
        git sha              : $Format:%H$
        copyright            : (C) 2024 by HMH
        email                : kbmkhkkb@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsMapLayer
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'my_plugin_dialog_base.ui'))


class MyPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MyPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self) 
        # Kết nối nút Show Metadata với hàm xử lý
        self.buttonShowMetadata.clicked.connect(self.show_all_metadata)

        # Đổ dữ liệu vào ComboBox cho lớp dữ liệu
        self.populate_layer_combobox()

    def populate_layer_combobox(self):
        """Đổ dữ liệu vào ComboBox với các lớp vector trong dự án."""
        layers = QgsProject.instance().mapLayers().values()
        self.comboBoxLayers.clear()  # Xóa dữ liệu cũ
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                self.comboBoxLayers.addItem(layer.name(), layer.id())

    def show_all_metadata(self):
        """Hiển thị tất cả metadata của lớp dữ liệu đã chọn."""
        layer_id = self.comboBoxLayers.currentData()
        layer = QgsProject.instance().mapLayer(layer_id)

        if layer:
            # Bắt đầu tạo chuỗi metadata
            metadata_info = (
                f"Layer Name: {layer.name()}\n"
                f"Geometry Type: {layer.geometryType()}\n"
                f"CRS: {layer.crs().authid()}\n"
                f"Feature Count: {layer.featureCount()}\n"
                f"Attribute Fields:\n"
            )

            # Thêm thông tin về các trường và kiểu dữ liệu
            for field in layer.fields():
                metadata_info += f"  - {field.name()} (Type: {field.typeName()})\n"

            # Thêm thông tin về Bounding Box (Hộp bao)
            bbox = layer.extent()
            metadata_info += (
                f"Bounding Box:\n"
                f"  - Min X: {bbox.xMinimum()}\n"
                f"  - Max X: {bbox.xMaximum()}\n"
                f"  - Min Y: {bbox.yMinimum()}\n"
                f"  - Max Y: {bbox.yMaximum()}\n"
            )

            # Thêm thông tin về một số đối tượng (ví dụ: 5 đối tượng đầu tiên)
            metadata_info += "Sample Features:\n"
            features = layer.getFeatures()
            for i, feature in enumerate(features):
                if i >= 5:  # Chỉ hiển thị 5 đối tượng đầu tiên
                    break
                metadata_info += f"  - ID: {feature.id()}, Attributes: {feature.attributes()}\n"
            

            # Hiển thị metadata trong ScrollArea
            self.scrollAreaMetadata.setWidget(QtWidgets.QLabel(metadata_info))
        else:
            self.scrollAreaMetadata.setWidget(QtWidgets.QLabel("No layer selected."))